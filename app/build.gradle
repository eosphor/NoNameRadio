apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: "de.undercouch.download"

buildscript {
    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
        maven { url 'https://jitpack.io' }
    }
    dependencies {
        classpath libs.download.task
    }
}


def getAvailableLocales() {
    def tree = fileTree(dir: 'src/main/res', include: '**/strings.xml')
    return tree.collect {
        def lang = it.getParentFile().getName() - "values-" - "values"

        // We want a name which would be understood by Locale::forLanguageTag, so we should do
        // do a simple conversion for an edge case:
        //   "pt-rBR" -> "pt-BR"
        //   "zh-rCN" -> "zh-CN"
        //   and so on
        lang = lang.replace("-r", "-")

        if (lang.empty) {
            lang = "en"
        }

        lang
    }
}

android {
    flavorDimensions "one"
    compileSdkVersion 36

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlin {
        jvmToolchain {
            languageVersion.set(JavaLanguageVersion.of("17"))
        }
    }

    buildFeatures {
        viewBinding true
        aidl true
        buildConfig true
    }

    defaultConfig {
        applicationId "com.nonameradio.app"
        minSdkVersion 21
        targetSdkVersion 36

        versionCode 99
        versionName "0.86.903-morckx"

        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }

        // Define your application name here.
        // It must neither be present in /res/values/strings.xml
        // nor in /res/values/string_no_translate.xml
        resValue 'string', 'app_name_untranslated', 'NoNameRadio'

        // There is no easy way to get available locales during runtime, and especially before
        // tests setup.
        def escapedLocales = getAvailableLocales().collect { "\"" + it + "\"" }
        buildConfigField "String[]", "AVAILABLE_LOCALES", String.format("{ %s }", escapedLocales.join(","))

        testInstrumentationRunner "net.programmierecke.radiodroid2.tests.CustomTestRunner"

        // The following argument makes the Android Test Orchestrator run its
        // "pm clear" command after each test invocation. This command ensures
        // that the app's state is completely cleared between tests.
        testInstrumentationRunnerArguments clearPackageData: 'true'

        // buildConfigField "java.util.concurrent.atomic.AtomicBoolean", "IS_TESTING", "new java.util.concurrent.atomic.AtomicBoolean(false)"
        buildConfigField "boolean", "IS_TESTING", "false"

        multiDexKeepProguard file('multidex-config.pro')

        vectorDrawables.useSupportLibrary = true
    }

    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
    }

    sourceSets {
        androidTest {
            resources.srcDirs += ['src/androidTest/resources']
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            debuggable true
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
        }
        
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            // Optimize APK
            zipAlignEnabled true
        }
    }
    
    productFlavors {
        play {
            dimension "one"
        }
        free {
            dimension "one"
        }
    }
    
    lint {
        abortOnError true
        disable 'UnsafeOptInUsageError', 'MissingTranslation'
        checkReleaseBuilds true
        warningsAsErrors false
    }
    
    namespace 'net.programmierecke.radiodroid2'

    testOptions {
        unitTests.all {
            useJUnit()
        }
        animationsDisabled = true
        unitTests.returnDefaultValues = true
    }

    // Build optimizations
    packagingOptions {
        resources {
            excludes += ['META-INF/DEPENDENCIES', 'META-INF/LICENSE', 'META-INF/LICENSE.txt', 'META-INF/NOTICE', 'META-INF/NOTICE.txt']
        }
    }
    
    // Enable parallel compilation
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }

    task renewFallbackStations(type: Download) {
        group 'Build Setup'
        description 'Renews the list of some popular and recently checked fallback stations'
        src 'https://de1.api.radio-browser.info/json/stations/search?limit=10&bitrateMax=128&hidebroken=true&has_extended_info=true&order=lastchecktime&reverse=true&bitrateMax=128'
        dest new File("app/src/main/res/raw", "fallback_stations.json")
        overwrite true
        tempAndMove true
    }
}

dependencies {
    // Core AndroidX
    implementation libs.androidx.multidex
    implementation libs.androidx.appcompat
    implementation libs.androidx.recyclerview
    implementation libs.androidx.swiperefreshlayout
    implementation libs.material
    implementation libs.androidx.preference.ktx
    implementation libs.androidx.mediarouter
    implementation libs.androidx.constraintlayout
    implementation libs.androidx.tvprovider
    implementation libs.androidx.tracing
    implementation libs.androidx.localbroadcast

    // Networking
    implementation libs.okhttp
    implementation libs.gson
    
    // Media
    implementation libs.bundles.media3
    
    // Image loading
    implementation libs.bundles.glide
    annotationProcessor libs.glide.compiler
    
    // UI Components
    implementation libs.iconics.core
    implementation libs.iconics.views
    implementation libs.google.material.typeface
    implementation libs.community.material.typeface
    
    // Utilities
    implementation libs.file.dialogs
    implementation libs.java.string.similarity
    implementation libs.fuzzywuzzy
    implementation libs.material.popup.menu
    implementation libs.search.preference

    // Database
    implementation libs.room.runtime
    annotationProcessor libs.room.compiler

    // Lifecycle
    implementation libs.lifecycle.extensions
    implementation libs.lifecycle.common.java8
    implementation libs.lifecycle.viewmodel.ktx

    // Paging
    implementation libs.paging.runtime.ktx

    // Analytics
    implementation libs.yandex.metrica

    // Testing
    testImplementation libs.junit4
    testImplementation libs.junit.jupiter.api
    testRuntimeOnly libs.junit.jupiter.engine
    testRuntimeOnly libs.junit.vintage.engine

    androidTestImplementation libs.androidx.test.core
    androidTestImplementation libs.androidx.test.ext.junit
    androidTestImplementation libs.espresso.core
    androidTestImplementation libs.androidx.test.runner
    androidTestImplementation libs.androidx.test.rules
    androidTestImplementation libs.uiautomator
    androidTestImplementation(libs.espresso.contrib) {
        exclude group: 'org.checkerframework', module: 'checker'
    }
    androidTestImplementation libs.mockwebserver
    androidTestImplementation libs.lingver
    androidTestUtil libs.androidx.test.orchestrator
}


// https://stackoverflow.com/questions/24649240/build-release-apk-with-customize-name-format-in-android-studio
// https://stackoverflow.com/questions/32092665/resolve-application-label-for-each-build-type/32220436#32220436
// https://stackoverflow.com/questions/18332474/how-to-set-versionname-in-apk-filename-using-gradle

// Gradle 3.0
// https://stackoverflow.com/questions/44800028/change-apk-filename-in-gradle-failed-with-gradle3-0-0-alpha4

android.applicationVariants.configureEach { variant ->

    variant.outputs.configureEach { output ->

        // get app_name field from defaultConfig
        def appName = variant.mergedFlavor.resValues.get('string/app_name_untranslated').getValue()
        appName = "${appName}"

        // concat new App name with each flavor's name

        variant.productFlavors.each { flavor ->
            appName += "-${flavor.name}"
        }

        // optionally add buildType name
        appName += "-${variant.buildType.name}"

        // your requirement: if buildType == debug, add DEV to App name
        if (variant.buildType.name == "debug") {
            appName += "-DEV"
        }

        // if you want, you can set a new resValue
        // variant.resValue 'string', 'app_name', appName

        /*
         * Gets the version name from the latest Git tag
         */

        def gitHash = { ->
            def stdout = new ByteArrayOutputStream()
            try {
                exec {
                    commandLine 'git', 'rev-parse', '--short', 'HEAD'
                    standardOutput = stdout
                }
                return stdout.toString().trim()
            } catch (Exception ignored) {
                return "No commit hash"
            }
        }

        resValue 'string', 'GIT_HASH', gitHash()

        def getBuildDate = {
            new Date().format('yyyy-MM-dd HH:mm:ss')
        }

        resValue 'string', 'BUILD_DATE', getBuildDate()

        def finalName = appName

        if (!versionName.isEmpty()) {
            finalName += "-" + versionName
        }

        finalName += "-" + gitHash() + ".apk"
        // outputFileName = "${variant.name}-${variant.versionName}.apk"
        outputFileName = finalName
    }
}
