apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: "de.undercouch.download"

buildscript {
    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
        maven { url 'https://jitpack.io' }
    }
    dependencies {
        classpath "de.undercouch:gradle-download-task:5.6.0"
    }
}


def getAvailableLocales() {
    def tree = fileTree(dir: 'src/main/res', include: '**/strings.xml')
    return tree.collect {
        def lang = it.getParentFile().getName() - "values-" - "values"

        // We want a name which would be understood by Locale::forLanguageTag, so we should do
        // do a simple conversion for an edge case:
        //   "pt-rBR" -> "pt-BR"
        //   "zh-rCN" -> "zh-CN"
        //   and so on
        lang = lang.replace("-r", "-")

        if (lang.empty) {
            lang = "en"
        }

        lang
    }
}

android {
    flavorDimensions "one"
    compileSdkVersion 36

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlin {
        jvmToolchain {
            languageVersion.set(JavaLanguageVersion.of("17"))
        }
    }

    buildFeatures {
        viewBinding true
        aidl true
        buildConfig true
    }

    defaultConfig {
        applicationId "com.nonameradio.app"
        minSdkVersion 21
        targetSdkVersion 36

        versionCode 99
        versionName "0.86.903-morckx"

        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }

        // Define your application name here.
        // It must neither be present in /res/values/strings.xml
        // nor in /res/values/string_no_translate.xml
        resValue 'string', 'app_name_untranslated', 'NoNameRadio'

        // There is no easy way to get available locales during runtime, and especially before
        // tests setup.
        def escapedLocales = getAvailableLocales().collect { "\"" + it + "\"" }
        buildConfigField "String[]", "AVAILABLE_LOCALES", String.format("{ %s }", escapedLocales.join(","))

        testInstrumentationRunner "net.programmierecke.radiodroid2.tests.CustomTestRunner"

        // The following argument makes the Android Test Orchestrator run its
        // "pm clear" command after each test invocation. This command ensures
        // that the app's state is completely cleared between tests.
        testInstrumentationRunnerArguments clearPackageData: 'true'

        // buildConfigField "java.util.concurrent.atomic.AtomicBoolean", "IS_TESTING", "new java.util.concurrent.atomic.AtomicBoolean(false)"
        buildConfigField "boolean", "IS_TESTING", "false"

        multiDexKeepProguard file('multidex-config.pro')

        vectorDrawables.useSupportLibrary = true
    }

    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
    }

    sourceSets {
        androidTest {
            resources.srcDirs += ['src/androidTest/resources']
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            debuggable true
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
        }
        
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            
            // Optimize APK
            zipAlignEnabled true
            
            lintOptions {
                disable 'MissingTranslation'
            }
        }
    }
    
    productFlavors {
        play {
            dimension "one"
        }
        free {
            dimension "one"
        }
    }
    
    lint {
        abortOnError true
        disable 'UnsafeOptInUsageError'
    }
    
    namespace 'net.programmierecke.radiodroid2'

    testOptions {
        unitTests.all {
            useJUnit()
        }
        animationsDisabled = true
        unitTests.returnDefaultValues = true
    }

    // Build optimizations
    packagingOptions {
        resources {
            excludes += ['META-INF/DEPENDENCIES', 'META-INF/LICENSE', 'META-INF/LICENSE.txt', 'META-INF/NOTICE', 'META-INF/NOTICE.txt']
        }
    }
    
    // Enable parallel compilation
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }

    task renewFallbackStations(type: Download) {
        group 'Build Setup'
        description 'Renews the list of some popular and recently checked fallback stations'
        src 'https://de1.api.radio-browser.info/json/stations/search?limit=10&bitrateMax=128&hidebroken=true&has_extended_info=true&order=lastchecktime&reverse=true&bitrateMax=128'
        dest new File("app/src/main/res/raw", "fallback_stations.json")
        overwrite true
        tempAndMove true
    }
}

ext {
    media3Version = '1.8.0'
    iconicsVersion = '5.4.0'
    androidxVersion = '1.7.1'
    materialVersion = '1.12.0'
    constraintVersion = '2.2.1'
    roomVersion = '2.7.2'
    lifecycleVersion = '2.9.1'
    pagingVersion = '3.3.6'
    okhttpVersion = '5.0.0'
    gsonVersion = '2.13.1'
    glideVersion = '4.16.0'
    testVersion = '1.6.1'
    espressoVersion = '3.6.1'
}

dependencies {
    // Core AndroidX
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation "androidx.appcompat:appcompat:$androidxVersion"
    implementation 'androidx.recyclerview:recyclerview:1.4.0'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    implementation "com.google.android.material:material:$materialVersion"
    implementation 'androidx.preference:preference-ktx:1.2.1'
    implementation 'androidx.mediarouter:mediarouter:1.8.1'
    implementation "androidx.constraintlayout:constraintlayout:$constraintVersion"
    implementation 'androidx.tvprovider:tvprovider:1.1.0'
    implementation 'androidx.tracing:tracing:1.3.0'

    // Networking
    implementation "com.squareup.okhttp3:okhttp:$okhttpVersion"
    implementation "com.google.code.gson:gson:$gsonVersion"
    
    // Media
    implementation "androidx.media3:media3-exoplayer:$media3Version"
    implementation "androidx.media3:media3-exoplayer-hls:$media3Version"
    implementation "androidx.media3:media3-session:$media3Version"
    implementation "androidx.media3:media3-ui:$media3Version"
    implementation "androidx.media3:media3-datasource-okhttp:$media3Version"
    
    // Image loading
    implementation "com.github.bumptech.glide:glide:$glideVersion"
    implementation "com.github.bumptech.glide:okhttp3-integration:$glideVersion"
    annotationProcessor "com.github.bumptech.glide:compiler:$glideVersion"
    
    // UI Components
    implementation "com.mikepenz:iconics-core:$iconicsVersion"
    implementation "com.mikepenz:iconics-views:$iconicsVersion"
    implementation 'com.mikepenz:google-material-typeface:3.0.1.4.original-kotlin@aar'
    implementation 'com.mikepenz:community-material-typeface:5.0.45.1-kotlin@aar'
    
    // Utilities
    implementation 'com.github.rustamg:file-dialogs:1.0'
    implementation 'info.debatty:java-string-similarity:2.0.0'
    implementation 'me.xdrop:fuzzywuzzy:1.4.0'
    implementation 'com.github.zawadz88:MaterialPopupMenu:3.4.0'
    implementation 'com.github.ByteHamster:SearchPreference:v2.3.0'

    // Database
    implementation "androidx.room:room-runtime:$roomVersion"
    annotationProcessor "androidx.room:room-compiler:$roomVersion"

    // Lifecycle
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycleVersion"

    // Paging
    implementation "androidx.paging:paging-runtime-ktx:$pagingVersion"

    // Play Services (Play flavor only)
    playImplementation 'com.google.android.gms:play-services-cast:22.1.0'
    playImplementation 'com.google.android.gms:play-services-cast-framework:22.1.0'
    playImplementation 'com.google.android.gms:play-services-safetynet:18.1.0'

    // Testing
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.13.3'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.13.3'
    testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:5.13.3'

    androidTestImplementation "androidx.test:core:$testVersion"
    androidTestImplementation 'androidx.test.ext:junit:1.2.1'
    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoVersion"
    androidTestImplementation "androidx.test:runner:1.6.2"
    androidTestImplementation "androidx.test:rules:$testVersion"
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.3.0'
    androidTestImplementation("androidx.test.espresso:espresso-contrib:$espressoVersion") {
        exclude group: 'org.checkerframework', module: 'checker'
    }
    androidTestImplementation("com.squareup.okhttp3:mockwebserver:$okhttpVersion")
    androidTestImplementation("com.github.YarikSOffice:lingver:1.3.0")
    androidTestUtil 'androidx.test:orchestrator:1.5.1'
}


// https://stackoverflow.com/questions/24649240/build-release-apk-with-customize-name-format-in-android-studio
// https://stackoverflow.com/questions/32092665/resolve-application-label-for-each-build-type/32220436#32220436
// https://stackoverflow.com/questions/18332474/how-to-set-versionname-in-apk-filename-using-gradle

// Gradle 3.0
// https://stackoverflow.com/questions/44800028/change-apk-filename-in-gradle-failed-with-gradle3-0-0-alpha4

android.applicationVariants.configureEach { variant ->

    variant.outputs.configureEach { output ->

        // get app_name field from defaultConfig
        def appName = variant.mergedFlavor.resValues.get('string/app_name_untranslated').getValue()
        appName = "${appName}"

        // concat new App name with each flavor's name

        variant.productFlavors.each { flavor ->
            appName += "-${flavor.name}"
        }

        // optionally add buildType name
        appName += "-${variant.buildType.name}"

        // your requirement: if buildType == debug, add DEV to App name
        if (variant.buildType.name == "debug") {
            appName += "-DEV"
        }

        // if you want, you can set a new resValue
        // variant.resValue 'string', 'app_name', appName

        /*
         * Gets the version name from the latest Git tag
         */

        def gitHash = { ->
            def stdout = new ByteArrayOutputStream()
            try {
                exec {
                    commandLine 'git', 'rev-parse', '--short', 'HEAD'
                    standardOutput = stdout
                }
                return stdout.toString().trim()
            } catch (Exception ignored) {
                return "No commit hash"
            }
        }

        resValue 'string', 'GIT_HASH', gitHash()

        def getBuildDate = {
            new Date().format('yyyy-MM-dd HH:mm:ss')
        }

        resValue 'string', 'BUILD_DATE', getBuildDate()

        def finalName = appName

        if (!versionName.isEmpty()) {
            finalName += "-" + versionName
        }

        finalName += "-" + gitHash() + ".apk"
        // outputFileName = "${variant.name}-${variant.versionName}.apk"
        outputFileName = finalName
    }
}

